Conventions:
{content} -- Agree, but yet to be implemented 
[content] -- Not to discuss in future

Specs:
line(
label = 'A,B', 'l', ',l', 'l,'
length = 20 (default: cm), '20in', '20px', '20m', '20cm', '20km', '20mi', '20mm', 
angle = 60 (default: degree), '60r', '60d'
slope = 0.01
style = solid, dashed
forwardArrow = None (default), 'Arrow1_Name=5:7,Arrow2_Name=Ratio', {v1, v2, 'A', 'B'}
backwardArrow = None (default), 'Arrow1_Name=5:7,Arrow2_Name=Ratio', {v1, v2, 'A', 'B'}
showLength = False (default), True
points = 'Point_Name=5:7'
showPoints = False (default), True, 'Point_Name', ['all,!Point1_Name,!Point2_Name'] -- show small circle as indication of point mark
showPointLabels = False (default), True, 'Point_Name', ['all,!Point1_Name,!Point2_Name'] -- show the label names along with the point
ext1 = extension(from = 'v1', 'v2', 'A', 'B',
length = '4cm', label = 'E', style = 'dashed') -- min user has to give from, In this case, by default, style will be dashed, no label, length will be parent_line_length/2 -- Need to think about inconsistency in quote with v1, v2
color = 'red'
thickness = 2 (will consider in pixel)
) -- no min parameter -- length = 10 cm, angle = 0d, x1,y1 = screen center

circle(
center = relative_position,(l1.P.x+2,l1.P.y+3),l1.P + (2,3),l1.p + ('2in','3in')
radius = relative_length,float
drawRadii = 30 -- list [30,60] -- if d -- default is degree....later on can be extended to radian
chord = [(int_angle,final_angle),(int_angle2,final_angle2)]
tangent = (30,150,'intersect') -- angle of the line joining center and tangent point -- need to think about intersection of tangent scenerio
point = 30
clockwiseArrow = 30 -- list for multiple
anticlockwiseArrow = 30
sector = (angle1,angle2)
) -- no min parameter -- center = screen center, radius = 2.5cm

sector - minor and major
segment - minor and major
circle related labelling